generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Batch {
  id              Int               @id @default(autoincrement())
  divisionId      Int
  name            String
  Division        Division          @relation(fields: [divisionId], references: [id])
  BatchTeacher    BatchTeacher[]
  StudentDivision StudentDivision[]
}

model BatchTeacher {
  id             Int                   @id @default(autoincrement())
  batchId        Int
  subjectId      Int
  teacherId      Int
  assignmentType TeacherAssignmentType @default(PRACTICAL)
  Batch          Batch                 @relation(fields: [batchId], references: [id])
  Subject        Subject               @relation(fields: [subjectId], references: [id])
  User           User                  @relation(fields: [teacherId], references: [id])

  @@unique([batchId, subjectId])
}

model Bench {
  id                     Int                      @id @default(autoincrement())
  classroomId            Int
  label                  String
  maxSeats               Int
  occupiedSeats          Int                      @default(0)
  posX                   Int
  posY                   Int
  Classroom              Classroom                @relation(fields: [classroomId], references: [id])
  ExamSeatingArrangement ExamSeatingArrangement[]

  @@unique([classroomId, label])
}

model Classroom {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  floor       Int
  capacity    Int
  instituteId Int
  Bench       Bench[]
  institutes  institutes    @relation(fields: [instituteId], references: [id])
  ExamSession ExamSession[]
}

model Division {
  id              Int               @id @default(autoincrement())
  semesterId      Int
  name            String
  Batch           Batch[]
  semesters       semesters         @relation(fields: [semesterId], references: [id])
  DivisionSubject DivisionSubject[]
  DivisionTeacher DivisionTeacher[]
  StudentDivision StudentDivision[]
  text_tables     text_tables?
}

model DivisionSubject {
  id         Int      @id @default(autoincrement())
  divisionId Int
  subjectId  Int
  Division   Division @relation(fields: [divisionId], references: [id])
  Subject    Subject  @relation(fields: [subjectId], references: [id])

  @@unique([divisionId, subjectId])
}

model DivisionTeacher {
  id             Int                   @id @default(autoincrement())
  divisionId     Int
  subjectId      Int
  teacherId      Int
  assignmentType TeacherAssignmentType @default(THEORY)
  Division       Division              @relation(fields: [divisionId], references: [id])
  Subject        Subject               @relation(fields: [subjectId], references: [id])
  User           User                  @relation(fields: [teacherId], references: [id])

  @@unique([divisionId, subjectId])
}

model Exam {
  id          Int           @id @default(autoincrement())
  name        String
  examDate    DateTime
  description String?
  createdAt   DateTime      @default(now())
  instituteId Int
  institutes  institutes    @relation(fields: [instituteId], references: [id])
  ExamSession ExamSession[]
}

model ExamSeatingArrangement {
  id            Int               @id @default(autoincrement())
  examSessionId Int
  benchId       Int
  seatNumber    Int
  studentId     Int               @unique
  status        ArrangementStatus @default(DRAFT)
  assignedAt    DateTime          @default(now())
  Bench         Bench             @relation(fields: [benchId], references: [id])
  ExamSession   ExamSession       @relation(fields: [examSessionId], references: [id])
  User          User              @relation(fields: [studentId], references: [id])

  @@unique([benchId, seatNumber])
}

model ExamSession {
  id                     Int                      @id @default(autoincrement())
  examId                 Int
  classroomId            Int
  sessionStart           DateTime
  sessionEnd             DateTime
  description            String?
  ExamSeatingArrangement ExamSeatingArrangement[]
  Classroom              Classroom                @relation(fields: [classroomId], references: [id])
  Exam                   Exam                     @relation(fields: [examId], references: [id])
  ExamSessionTeacher     ExamSessionTeacher[]
  ExamTeacherArrangement ExamTeacherArrangement[]
}

model ExamSessionTeacher {
  id            Int             @id @default(autoincrement())
  examSessionId Int
  teacherId     Int
  role          TeacherExamRole @default(INVIGILATOR)
  ExamSession   ExamSession     @relation(fields: [examSessionId], references: [id])
  User          User            @relation(fields: [teacherId], references: [id])

  @@unique([examSessionId, teacherId])
}

model ExamTeacherArrangement {
  id            Int               @id @default(autoincrement())
  examSessionId Int
  teacherId     Int
  posX          Int
  posY          Int
  status        ArrangementStatus @default(DRAFT)
  assignedAt    DateTime          @default(now())
  ExamSession   ExamSession       @relation(fields: [examSessionId], references: [id])
  User          User              @relation(fields: [teacherId], references: [id])

  @@unique([examSessionId, teacherId])
}

model Notification {
  id        String           @id
  userId    Int
  type      NotificationType
  message   String
  link      String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentDivision {
  id         Int      @id @default(autoincrement())
  studentId  Int
  divisionId Int
  batchId    Int?
  Batch      Batch?   @relation(fields: [batchId], references: [id])
  Division   Division @relation(fields: [divisionId], references: [id])
  User       User     @relation(fields: [studentId], references: [id])
}

model StudentSemester {
  id         Int                   @id @default(autoincrement())
  studentId  Int
  semesterId Int
  status     StudentSemesterStatus @default(PENDING)
  semesters  semesters             @relation(fields: [semesterId], references: [id])
  User       User                  @relation(fields: [studentId], references: [id])
}

model Subject {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  type            SubjectType
  BatchTeacher    BatchTeacher[]
  DivisionSubject DivisionSubject[]
  DivisionTeacher DivisionTeacher[]
  TestMarks       TestMarks[]
}

model TestMarks {
  id          Int         @id @default(autoincrement())
  studentId   Int
  subjectId   Int
  testId      Int
  obtained    Float
  total       Float
  createdAt   DateTime    @default(now())
  User        User        @relation(fields: [studentId], references: [id])
  Subject     Subject     @relation(fields: [subjectId], references: [id])
  text_tables text_tables @relation(fields: [testId], references: [id])

  @@unique([studentId, subjectId, testId])
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  role                   Role
  availabilityStatus     AvailabilityStatus       @default(AVAILABLE)
  BatchTeacher           BatchTeacher[]
  DivisionTeacher        DivisionTeacher[]
  ExamSeatingArrangement ExamSeatingArrangement?
  ExamSessionTeacher     ExamSessionTeacher[]
  ExamTeacherArrangement ExamTeacherArrangement[]
  Notification           Notification[]
  StudentDivision        StudentDivision[]
  StudentSemester        StudentSemester[]
  TestMarks              TestMarks[]
  institutes             institutes[]
  messages               messages[]
}

model chats {
  id         Int        @id @default(autoincrement())
  semesterId Int        @unique
  semesters  semesters  @relation(fields: [semesterId], references: [id])
  messages   messages[]
}

model demo {
  id Int @id @default(autoincrement())
}

model institutes {
  id             Int         @id @default(autoincrement())
  createdBy      Int
  access         Json[]      @default([])
  noOfClassRooms Int
  noOfStudents   Int
  noOfTeachers   Int
  noOfSemesters  Int
  noOfBenches    Int
  Classroom      Classroom[]
  Exam           Exam[]
  User           User        @relation(fields: [createdBy], references: [id])
  semesters      semesters[]
}

model messages {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  Int
  content   String
  createdAt DateTime @default(now())
  chats     chats    @relation(fields: [chatId], references: [id])
  User      User     @relation(fields: [senderId], references: [id])
}

model semesters {
  id              Int               @id @default(autoincrement())
  instituteId     Int
  name            String
  createdAt       DateTime          @default(now())
  department      String
  access          String[]
  Division        Division[]
  StudentSemester StudentSemester[]
  chats           chats?
  institutes      institutes        @relation(fields: [instituteId], references: [id])
}

model text_tables {
  id         Int         @id @default(autoincrement())
  divisionId Int         @unique
  testscore  String
  updatedAt  DateTime
  TestMarks  TestMarks[]
  Division   Division    @relation(fields: [divisionId], references: [id])
}

enum ArrangementStatus {
  DRAFT
  PUBLISHED
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
}

enum NotificationType {
  SYSTEM
  EMAIL
  PUSH
  SMS
  REMINDER
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum StudentSemesterStatus {
  PENDING
  APPROVED
}

enum SubjectType {
  THEORY
  PRACTICAL
  BOTH
}

enum TeacherAssignmentType {
  THEORY
  PRACTICAL
}

enum TeacherExamRole {
  INVIGILATOR
  SUPERVISOR
  OTHER
}
